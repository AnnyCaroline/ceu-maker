/*
 * A simple LCD game for Arduino using CÃ©u.
 *
 * To compile it, follow the instructions at
 * http://www.ceu-lang.org/wiki/index.php?title=Arduino
 *
 * Then, copy the Arduino LCD library to the working directory:
 * $ /opt/arduino-1.0/libraries/LiquidCrystal/LiquidCrystal.* .
 *
 * Finally, run
 * $ make CEUFILE=ship.ceu
 *
 * Francisco Sant'Anna
 * http://www.lua.inf.puc-rio.br/~francisco/
 */

#include "arduino/arduino.ceu"

input void REDRAW;
input int  KEY;

native/const _KEY_NONE, _KEY_RIGHT, _KEY_UP, _KEY_DOWN,
             _KEY_LEFT, _KEY_SELECT;
native/pure _analog2key;
native _map_generate, _redraw, _MAP, _END, _lcd;

deterministic _analogRead with _map_generate, _redraw;

native/pre do
    ##include <LiquidCrystal.h>
    LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

    enum {
        KEY_NONE,
        KEY_RIGHT,
        KEY_UP,
        KEY_DOWN,
        KEY_LEFT,
        KEY_SELECT,
    };

    ##define END 22
    char MAP[2][END] = {
        { ' ', '|', ' ', '*', ' ', ' ', ' ', '*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*', ' ', ' ', '*', ' ', ' ', '|' },
        { ' ', '|', ' ', ' ', ' ', '*', ' ', ' ', ' ', ' ', '*', ' ', ' ', '*', ' ', ' ', '*', ' ', ' ', '*', ' ', '|' },
    };

    void map_generate (int n) {
        int i;
        for (i=3; i<END-1; i++) {
            if (random(0,n) < 10) {
                int j = random(0,2);
                MAP[j]  [i] = '*';
                MAP[1-j][i] = ' ';
            } else {
                MAP[0][i] = ' ';
                MAP[1][i] = ' ';
            }
        }
    }

    void redraw (int N, int ship, int dir, int pts) {
        int i;

        lcd.setCursor(0, 0);
        for (i=N; i<N+16; i++)
            if (i >= END)
                lcd.write(' ');
            else
                lcd.write( MAP[0][i] );

        lcd.setCursor(0, 1);
        for (i=N; i<N+16; i++)
            if (i >= END)
                lcd.write(' ');
            else
                lcd.write( MAP[1][i] );

        lcd.setCursor(13, 1);
        lcd.print(pts);

        lcd.setCursor(0, ship);
        if (dir) {
            lcd.write('>');
        } else {
            lcd.write('<');
        }
    }

    int analog2key (u16 analog) {
        if (analog < 30)
            return KEY_RIGHT;
        if (analog < 150)
            return KEY_UP;
        if (analog < 360)
            return KEY_DOWN;
        if (analog < 535)
            return KEY_LEFT;
        if (analog < 760)
            return KEY_SELECT;
        return KEY_NONE;
    }
end

_lcd.begin(16, 2);

_randomSeed(_analogRead(12));

par do
    var int pct    = 0;     // all initialized on "restart" below
    var int dt     = 0;
    var int step   = 0;
    var int ship   = 0;
    var int points = 0;
    var int dir    = 0;
    var bool win   = false;

    par do
        loop do
            if win then
                // next phase (faster, harder, keep points)
                step = 0;
                ship = 0;
                if dt > 100 then
                    dt = dt - 50;
                end
                if pct > 10 then
                    pct = pct - 1;
                end
            else
                // restart
                pct    = 35;    // map generator (10 out of 35 for a '*')
                dt     = 500;   // game speed (500ms/step)
                step   = 0;     // current step
                ship   = 0;     // ship position (0=up, 1=down)
                points = 0;     // number of steps alive
            end

            dir = 1;
            _map_generate(pct);
            await KEY;
            win = do
                par do
                    loop do
                        await (dt)ms;
                        step = step + 1;

                        if _MAP[ship][step] == {'*'} then
                            escape false;           // a collision
                        end

                        if step == _END-1 then
                            escape true;            // finish line
                        end

                        points = points + 1;
                    end
                with
                    loop do
                        var int key = await KEY;
                        if key == _KEY_UP then
                            ship = 0;
                        end
                        if key == _KEY_DOWN then
                            ship = 1;
                        end
                    end
                end
            end;

            par/or do
                await 1s;
                await KEY;
            with
                if not win then
                    loop do
                        await 100ms;
                        dir = 0;
                        await 100ms;
                        dir = 1;
                    end
                end
            end
        end
    with
        every REDRAW do
            _redraw(step, ship, dir, points);
        end
    end

with

    var int key = _KEY_NONE;
    loop do
        var int read1 = _analogRead(0);
                read1 = _analog2key(read1);
        await 50ms;
        var int read2 = _analogRead(0);
                read2 = _analog2key(read2);
        if read1==read2 and key!=read1 then
            key = read1;
            if key != _KEY_NONE then
                await async (read1) do
                    emit KEY(read1);
                end
            end
        end
        await async do
            emit REDRAW;
        end
    end
end
