native/pre do
    //##define CEU_FEATURES_ISR_SLEEP
end

#include "arduino/avr.ceu"
#include "arduino/arduino.ceu"

/*
 * With 1024 prescaler: 16M/1024 incs/s : 15625 incs/s
 * 4194304 us for 65536 incs
 */
#define CPU_FREQ        16000000                          // 16Mhz
#define INCS_PER_SECOND (CPU_FREQ/1024)                   // 15625
#define US_PER_CYCLE    (65536*1000000 / INCS_PER_SECOND) // 4194304
#define US_TO_INCS(us)  ((us)*65536/US_PER_CYCLE)
//#define US_TO_OVERFLOW(us) (65536 - US_TO_INCS(us))
// all simplified goes to this:
#define US_TO_OVERFLOW(us) (65536 - (us/64) - 64)
#define INCS_TO_US(incs) (((s32)(incs))*64)

native _ceu_arduino_dt;
native/pos do
    static u16 CEU_ARDUINO_old;
    tceu_callback_ret ceu_callback_isr (int cmd, tceu_callback_arg p1,
                                                 tceu_callback_arg p2,
                                                 const char* file, u32 line)
    {
        tceu_callback_ret ret = { .is_handled=1 };
        switch (cmd) {
            case CEU_CALLBACK_WCLOCK_MIN: {
                s32 us = p1.num;
                if (us == CEU_WCLOCK_INACTIVE) {
                    TIMSK1 = TIMSK1 & ~(1 << TOIE1);
                } else {
                    s32 v = US_TO_OVERFLOW(us);
                    ceu_dbg_assert(v > 0);
                    TCNT1 = v;
                    CEU_ARDUINO_old = v;
                    TIMSK1 = TIMSK1 | (1 << TOIE1);
                }
                break;
            }
            default:
                ret.is_handled = 0;
        }
        return ret;
    }
    tceu_callback CEU_CALLBACK_ISR = { &ceu_callback_isr, NULL };

    s32 ceu_arduino_dt (void) {
        u16 now = TCNT1;
        s32 dt  = (now - CEU_ARDUINO_old);
        CEU_ARDUINO_old = now;
        return INCS_TO_US(dt);
    }
end

{
    ceu_callback_register(&CEU_CALLBACK_ISR);
    CEU_ARDUINO_old = TCNT1;
    TCCR1A = 0;
    TCCR1B = (1 << CS12) | (1 << CS10); // 1024 prescaler
}

spawn async/isr [_TIMER1_OVF_vect_num, 0] do
    emit (_ceu_arduino_dt())us;
end

output bool PIN_13;

var int i;
loop i in [0->5[ do
    emit PIN_13(true);
    await 250ms;
    emit PIN_13(false);
    await 250ms;
end

await 1s;
loop i in [0->5[ do
    emit PIN_13(true);
    await 500ms;
    emit PIN_13(false);
    await 500ms;
end

await 1s;
loop i in [0->5[ do
    emit PIN_13(true);
    await 1s;
    emit PIN_13(false);
    await 1s;
end

await 1s;
loop i in [0->5[ do
    emit PIN_13(true);
    await 2s;
    emit PIN_13(false);
    await 2s;
end

await 1s;
emit PIN_13(true);
loop i in [0->10[ do
    await 1s;
end
emit PIN_13(false);

// ERROR here, overflow!
await 1s;
loop i in [0->5[ do
    emit PIN_13(true);
    await 5s;
    emit PIN_13(false);
    await 5s;
end
